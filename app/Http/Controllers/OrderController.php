<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Validator;
use App\Models\Order;
use App\Notifications\CreatOrder;
use App\Notifications\NewOrderNotification;
use App\Notifications\UpdateOrder;
use App\Models\User;
use Illuminate\Support\Facades\Notification;
class OrderController extends Controller
{
    // ุฅูุดุงุก ุทูุจ ุฌุฏูุฏ
    public function createOrder(Request $request)
    {
        $user = auth()->user();


        if (!$user) {
            return response()->json(['message' => 'ุบูุฑ ูุตุฑุญ. ุจุฑุฌุงุก ุชุณุฌูู ุงูุฏุฎูู ุฃููุงู.'], 401);
        }

        $validator = Validator::make($request->all(), [
            'city'         => 'required|string|max:100',
            'governorate'  => 'required|string|max:100',
            'street'       => 'required|string|max:255',
            'phone'        => ['required', 'regex:/^(010|011|012|015)[0-9]{8}$/'],
            'store_name'   => 'nullable|string|max:255',
            'status'       => 'nullable|string|in:pending,paid,shipped,completed,cancelled',
            'payment_method' => 'nullable|string|in:cod,credit_card,paypal',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'message' => 'ุฎุทุฃ ูู ุงูุชุญูู ูู ุงูุจูุงูุงุช',
                'errors'  => $validator->errors()
            ], 422);
        }

        $cart = $user->getcart()->with('proCItem.product')->first();

        if (!$cart || $cart->proCItem->isEmpty()) {
            return response()->json(['message' => 'ุงูุณูุฉ ูุงุฑุบุฉ'], 400);
        }

        $total = $cart->proCItem->sum(fn($item) => $item->quantity * $item->product->price);

        $order = Order::create([
            'user_id'        => $user->id,
            'total_price'    => $total,
            'status'         => $request->status ?? 'pending',
            'city'           => $request->city,
            'governorate'    => $request->governorate,
            'street'         => $request->street,
            'phone'          => $request->phone,
            'store_name'     => $request->store_name,
            'payment_method' => $request->payment_method,
        ]);
        if ( $order ) {
    // ุฌูุจ ูู ุงููุณุชุฎุฏููู ุงููู ุฑูููู ุฃุฏูู
    $admins = User::where('role', 'admin')->get();

    // ุงุจุนุช ุงูุฅุดุนุงุฑ ูููู
    Notification::send($admins, new CreatOrder($user,$order));
     // ๐ ุฅุฑุณุงู ุฅุดุนุงุฑ ูููุณุชุฎุฏู ููุณู
    $user->notify(new NewOrderNotification($order));
}

        foreach ($cart->proCItem as $item) {
            $order->orderdetels()->create([
                'product_id' => $item->product_id,
                'quantity'   => $item->quantity,
                'price'      => $item->product->price,
            ]);
        }

        $cart->proCItem()->truncate();

        return response()->json([
            'message' => 'ุชู ุฅูุดุงุก ุงูุทูุจ ุจูุฌุงุญ',
            'order'   => $order->load('orderdetels.product')
        ], 201);
    }

    // ุนุฑุถ ุทูุจุงุช ุงููุณุชุฎุฏู ุงูุญุงูู
    public function showOrder()
    {
        $user = auth()->user();
        $order = $user->getOrder()->with('orderdetels.product')->get();

        return response()->json([
            'message' => 'ุชู ุฌูุจ ุงูุทูุจุงุช ุงูุฎุงุตุฉ ุจู ุจูุฌุงุญ',
            'order'   => $order,
        ], 200);
    }

    // ุนุฑุถ ุขุฎุฑ ุทูุจ
    public function showlatestOrder()
    {
        $user = auth()->user();
        $orderlatest = $user->getOrder()->with('orderdetels.product')->latest()->first();

        return response()->json([
            'message' => 'ุชู ุฌูุจ ุขุฎุฑ ุทูุจ ุจูุฌุงุญ',
            'orderlatest' => $orderlatest,
        ], 200);
    }

    // ุนุฑุถ ุฌููุน ุงูุทูุจุงุช (ูู admin ููุท)
    public function showAllOrders()
    {
        $user = auth()->user();

        if ($user->role !== 'admin') {
            return response()->json(['message' => 'ุบูุฑ ูุตุฑุญ - ููุท ูููุฏูุฑูู'], 403);
        }

        $orders = Order::with(['orderdetels.product', 'userorder'])->latest()->get();

        return response()->json([
            'message' => 'ุชู ุฌูุจ ุฌููุน ุงูุทูุจุงุช ุจูุฌุงุญ',
            'orders'  => $orders,
        ], 200);
    }

    // ุชุนุฏูู ุญุงูุฉ ุงูุทูุจ (ูุณููุญ ูููุณุชุฎุฏู ุงูุนุงุฏู)
    public function updateOrderStatus(Request $request, $id)
    {
        $user = auth()->user();
        $order = Order::find($id);

        if (!$order) {
            return response()->json(['message' => 'ุงูุทูุจ ุบูุฑ ููุฌูุฏ'], 404);
        }

        // ุงูุณูุงุญ ููุท ูุตุงุญุจ ุงูุทูุจ ุฃู ุงูุฃุฏูู
        if ($order->user_id !== $user->id && $user->role !== 'admin') {
            return response()->json(['message' => 'ุบูุฑ ูุตุฑุญ ูู ุจุชุนุฏูู ูุฐุง ุงูุทูุจ'], 403);
        }

        $validator = Validator::make($request->all(), [
            'status' => 'required|string|in:pending,paid,shipped,completed,cancelled',
        ]);

        if ($validator->fails()) {
            return response()->json([
                'message' => 'ุฎุทุฃ ูู ุงูุชุญูู ูู ุงูุญุงูุฉ ุงูุฌุฏูุฏุฉ',
                'errors'  => $validator->errors(),
            ], 422);
        }

        // ูู ุงููุณุชุฎุฏู ุงูุนุงุฏู ุจูุญุงูู ูุนุฏู
        if ($user->role !== 'admin') {
            // ุงูุญุงูุงุช ุงููุณููุญ ุจูุง ููุท ูููุณุชุฎุฏู
            if (!in_array($request->status, ['pending', 'cancelled'])) {
                return response()->json([
                    'message' => 'ููููู ููุท ุฅูุบุงุก ุงูุทูุจ ุฃู ุฅุฑุฌุงุนู ูุญุงูุฉ ุงูุงูุชุธุงุฑ'
                ], 403);
            }

            // ูุง ูููู ุชุนุฏูู ุญุงูุฉ ุงูุทูุจ ุจุนุฏ ุงูุดุญู ุฃู ุงูุฅููุงู
            if (in_array($order->status, ['shipped', 'completed'])) {
                return response()->json([
                    'message' => 'ูุง ููููู ุชุนุฏูู ุงูุทูุจ ุจุนุฏ ุดุญูู ุฃู ุฅููุงูู'
                ], 403);
            }
        }

        $order->update(['status' => $request->status]);

        return response()->json([
            'message' => 'ุชู ุชุญุฏูุซ ุญุงูุฉ ุงูุทูุจ ุจูุฌุงุญ',
            'order'   => $order,
        ], 200);
         if ( $order) {
    // ุฌูุจ ูู ุงููุณุชุฎุฏููู ุงููู ุฑูููู ุฃุฏูู
    $admins = User::where('role', 'admin')->get();

    // ุงุจุนุช ุงูุฅุดุนุงุฑ ูููู
    Notification::send($admins, new UpdateOrder($user));
}

    }

    // ุญุฐู ุทูุจ (ูููุณุชุฎุฏู ุฃู admin)
    public function deleteOrder($id)
    {
        $user = auth()->user();
        $order = Order::find($id);

        if (!$order) {
            return response()->json(['message' => 'ุงูุทูุจ ุบูุฑ ููุฌูุฏ'], 404);
        }

        if ($order->user_id !== $user->id && $user->role !== 'admin') {
            return response()->json(['message' => 'ุบูุฑ ูุตุฑุญ ูู ุจุญุฐู ูุฐุง ุงูุทูุจ'], 403);
        }

        $order->delete();

        return response()->json(['message' => 'ุชู ุญุฐู ุงูุทูุจ ุจูุฌุงุญ'], 200);
    }

    // ุญุฐู ูู ุงูุทูุจุงุช (ูููุณุชุฎุฏู ุฃู admin)
    public function deleteAllOrder()
    {
        $user = auth()->user();

        if ($user->role === 'admin') {
            Order::truncate();
            return response()->json(['message' => 'ุชู ุญุฐู ุฌููุน ุงูุทูุจุงุช ุจูุงุณุทุฉ ุงููุฏูุฑ'], 200);
        }

        $user->getOrder()->delete();

        return response()->json(['message' => 'ุชู ุญุฐู ุฌููุน ุทูุจุงุชู ุจูุฌุงุญ'], 200);
    }
}
